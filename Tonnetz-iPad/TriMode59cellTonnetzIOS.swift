//
//  TriMode59cellTonnetzIOS.swift
//  Tonnetz
//
//  Created by Thom Jordan on 8/9/19.
//  Copyright Â© 2019 RatioExemplar. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class TriMode59cellTonnetzIOS : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawCellSym(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 175, height: 203), resizing: ResizingBehavior = .aspectFit, color: CGFloat = 0, colorOS: CGFloat = 4, pcOS: CGFloat = 0, rowOS: CGFloat = 0, mode: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 175, height: 203), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 175, y: resizedFrame.height / 203)


        //// Color Declarations
        let grey = UIColor(red: 0.502, green: 0.502, blue: 0.502, alpha: 0.960)
        let liteGrey = UIColor(red: 0.790, green: 0.790, blue: 0.790, alpha: 0.970)
        let red = UIColor(red: 1.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let orange = UIColor(red: 1.000, green: 0.502, blue: 0.000, alpha: 1.000)
        let yellow = UIColor(red: 1.000, green: 1.000, blue: 0.000, alpha: 1.000)
        let yellowGreen = UIColor(red: 0.502, green: 1.000, blue: 0.000, alpha: 1.000)
        let green = UIColor(red: 0.000, green: 1.000, blue: 0.000, alpha: 1.000)
        let greenBlue = UIColor(red: 0.000, green: 1.000, blue: 0.502, alpha: 1.000)
        let blueGreen = UIColor(red: 0.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let blue = UIColor(red: 0.000, green: 0.502, blue: 1.000, alpha: 1.000)
        let indigo = UIColor(red: 0.000, green: 0.000, blue: 1.000, alpha: 1.000)
        let violet = UIColor(red: 0.502, green: 0.000, blue: 1.000, alpha: 1.000)
        let purple = UIColor(red: 1.000, green: 0.000, blue: 1.000, alpha: 1.000)
        let magenta = UIColor(red: 1.000, green: 0.000, blue: 0.502, alpha: 1.000)
        let charcoal = UIColor(red: 0.216, green: 0.216, blue: 0.216, alpha: 1.000)

        //// Variable Declarations
        let colE: CGFloat = fmod(color, 12) == 0 ? 0 : (fmod(color, 12) == 1 ? 7 : (fmod(color, 12) == 2 ? 2 : (fmod(color, 12) == 3 ? 9 : (fmod(color, 12) == 4 ? 4 : (fmod(color, 12) == 5 ? 11 : (fmod(color, 12) == 6 ? 6 : (fmod(color, 12) == 7 ? 1 : (fmod(color, 12) == 8 ? 8 : (fmod(color, 12) == 9 ? 3 : (fmod(color, 12) == 10 ? 10 : 5))))))))))
        let pcOSe: CGFloat = fmod(pcOS, 12) == 0 ? 0 : (fmod(pcOS, 12) == 1 ? 7 : (fmod(pcOS, 12) == 2 ? 2 : (fmod(pcOS, 12) == 3 ? 9 : (fmod(pcOS, 12) == 4 ? 4 : (fmod(pcOS, 12) == 5 ? 11 : (fmod(pcOS, 12) == 6 ? 6 : (fmod(pcOS, 12) == 7 ? 1 : (fmod(pcOS, 12) == 8 ? 8 : (fmod(pcOS, 12) == 9 ? 3 : (fmod(pcOS, 12) == 10 ? 10 : 5))))))))))
        let rowOSe: CGFloat = fmod(rowOS, 12) == 0 ? 0 : (fmod(rowOS, 12) == 1 ? 7 : (fmod(rowOS, 12) == 2 ? 2 : (fmod(rowOS, 12) == 3 ? 9 : (fmod(rowOS, 12) == 4 ? 4 : (fmod(rowOS, 12) == 5 ? 11 : (fmod(rowOS, 12) == 6 ? 6 : (fmod(rowOS, 12) == 7 ? 1 : (fmod(rowOS, 12) == 8 ? 8 : (fmod(rowOS, 12) == 9 ? 3 : (fmod(rowOS, 12) == 10 ? 10 : 5))))))))))
        let colorExp = fmod((colE + pcOSe + rowOSe + colorOS), 12) == 0 ? red : (fmod((colE + pcOSe + rowOSe + colorOS), 12) == 1 ? orange : (fmod((colE + pcOSe + rowOSe + colorOS), 12) == 2 ? yellow : (fmod((colE + pcOSe + rowOSe + colorOS), 12) == 3 ? yellowGreen : (fmod((colE + pcOSe + rowOSe + colorOS), 12) == 4 ? green : (fmod((colE + pcOSe + rowOSe + colorOS), 12) == 5 ? greenBlue : (fmod((colE + pcOSe + rowOSe + colorOS), 12) == 6 ? blueGreen : (fmod((colE + pcOSe + rowOSe + colorOS), 12) == 7 ? blue : (fmod((colE + pcOSe + rowOSe + colorOS), 12) == 8 ? indigo : (fmod((colE + pcOSe + rowOSe + colorOS), 12) == 9 ? violet : (fmod((colE + pcOSe + rowOSe + colorOS), 12) == 10 ? purple : magenta))))))))))
        let noteCalc = fmod((pcOSe + colE + rowOSe), 12) == 0 ? "C" : (fmod((pcOSe + colE + rowOSe), 12) == 1 ? "G" : (fmod((pcOSe + colE + rowOSe), 12) == 2 ? "D" : (fmod((pcOSe + colE + rowOSe), 12) == 3 ? "A" : (fmod((pcOSe + colE + rowOSe), 12) == 4 ? "E" : (fmod((pcOSe + colE + rowOSe), 12) == 5 ? "B" : (fmod((pcOSe + colE + rowOSe), 12) == 6 ? "F#" : (fmod((pcOSe + colE + rowOSe), 12) == 7 ? "Db" : (fmod((pcOSe + colE + rowOSe), 12) == 8 ? "Ab" : (fmod((pcOSe + colE + rowOSe), 12) == 9 ? "Eb" : (fmod((pcOSe + colE + rowOSe), 12) == 10 ? "Bb" : "F"))))))))))
        let isMode0 = fmod(mode, 3) == 0
        let isMode2 = fmod(mode, 3) == 2

        //// pA Drawing
        let pAPath = UIBezierPath()
        pAPath.move(to: CGPoint(x: 88, y: 1))
        pAPath.addLine(to: CGPoint(x: 174.6, y: 51))
        pAPath.addLine(to: CGPoint(x: 174.6, y: 151))
        pAPath.addLine(to: CGPoint(x: 88, y: 201))
        pAPath.addLine(to: CGPoint(x: 1.4, y: 151))
        pAPath.addLine(to: CGPoint(x: 1.4, y: 51))
        pAPath.close()
        colorExp.setFill()
        pAPath.fill()
        charcoal.setStroke()
        pAPath.lineWidth = 3
        pAPath.stroke()


        if (isMode0) {
            //// pB Drawing
            let pBPath = UIBezierPath()
            pBPath.move(to: CGPoint(x: 88, y: 1))
            pBPath.addLine(to: CGPoint(x: 174.6, y: 51))
            pBPath.addLine(to: CGPoint(x: 174.6, y: 151))
            pBPath.addLine(to: CGPoint(x: 88, y: 201))
            pBPath.addLine(to: CGPoint(x: 1.4, y: 151))
            pBPath.addLine(to: CGPoint(x: 1.4, y: 51))
            pBPath.close()
            grey.setFill()
            pBPath.fill()
            UIColor.darkGray.setStroke()
            pBPath.lineWidth = 1.5
            pBPath.stroke()
        }


        if (isMode2) {
            //// pC Drawing
            let pCPath = UIBezierPath()
            pCPath.move(to: CGPoint(x: 88, y: 1))
            pCPath.addLine(to: CGPoint(x: 174.6, y: 51))
            pCPath.addLine(to: CGPoint(x: 174.6, y: 151))
            pCPath.addLine(to: CGPoint(x: 88, y: 201))
            pCPath.addLine(to: CGPoint(x: 1.4, y: 151))
            pCPath.addLine(to: CGPoint(x: 1.4, y: 51))
            pCPath.close()
            liteGrey.setFill()
            pCPath.fill()
            UIColor.darkGray.setStroke()
            pCPath.lineWidth = 1.5
            pCPath.stroke()
        }


        //// pTB Drawing
        context.saveGState()
        context.setAlpha(0.1)
        context.setBlendMode(.multiply)

        let pTBPath = UIBezierPath(roundedRect: CGRect(x: 60.5, y: 72.5, width: 55, height: 55), cornerRadius: 27.5)
        UIColor.gray.setFill()
        pTBPath.fill()

        context.restoreGState()


        //// pT Drawing
        let pTRect = CGRect(x: 65, y: 80, width: 45, height: 37.5)
        let pTStyle = NSMutableParagraphStyle()
        pTStyle.alignment = .center
        let pTFontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: 34),
            .foregroundColor: UIColor.white,
            .paragraphStyle: pTStyle,
        ] as [NSAttributedString.Key: Any]

        let pTTextHeight: CGFloat = noteCalc.boundingRect(with: CGSize(width: pTRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: pTFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: pTRect)
        noteCalc.draw(in: CGRect(x: pTRect.minX, y: pTRect.minY + (pTRect.height - pTTextHeight) / 2, width: pTRect.width, height: pTTextHeight), withAttributes: pTFontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawTonnetz(colorOS: CGFloat = 4, pcOS: CGFloat = 0, mode1: CGFloat = 0, mode2: CGFloat = 0, mode3: CGFloat = 0, mode4: CGFloat = 0, mode5: CGFloat = 0, mode6: CGFloat = 0, mode7: CGFloat = 0, mode8: CGFloat = 0, mode9: CGFloat = 0, mode10: CGFloat = 0, mode11: CGFloat = 0, mode12: CGFloat = 0, mode13: CGFloat = 0, mode14: CGFloat = 0, mode15: CGFloat = 0, mode16: CGFloat = 0, mode17: CGFloat = 0, mode18: CGFloat = 0, mode19: CGFloat = 0, mode20: CGFloat = 0, mode21: CGFloat = 0, mode22: CGFloat = 0, mode23: CGFloat = 0, mode24: CGFloat = 0, mode25: CGFloat = 0, mode26: CGFloat = 0, mode27: CGFloat = 0, mode28: CGFloat = 0, mode29: CGFloat = 0, mode30: CGFloat = 0, mode31: CGFloat = 0, mode32: CGFloat = 0, mode33: CGFloat = 0, mode34: CGFloat = 0, mode35: CGFloat = 0, mode36: CGFloat = 0, mode37: CGFloat = 0, mode38: CGFloat = 0, mode39: CGFloat = 0, mode40: CGFloat = 0, mode41: CGFloat = 0, mode42: CGFloat = 0, mode43: CGFloat = 0, mode44: CGFloat = 0, mode45: CGFloat = 0, mode46: CGFloat = 0, mode47: CGFloat = 0, mode48: CGFloat = 0, mode49: CGFloat = 0, mode50: CGFloat = 0, mode51: CGFloat = 0, mode52: CGFloat = 0, mode53: CGFloat = 0, mode54: CGFloat = 0, mode55: CGFloat = 0, mode56: CGFloat = 0, mode57: CGFloat = 0, mode58: CGFloat = 0, mode59: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!


        //// Variable Declarations
        let pcOSadjusted: CGFloat = pcOS + 1
        let c0: CGFloat = 0
        let c1: CGFloat = 1
        let c2: CGFloat = 2
        let c4: CGFloat = 4
        let c6: CGFloat = 6
        let c7: CGFloat = 7
        let c8: CGFloat = 8
        let c9: CGFloat = 9
        let c10: CGFloat = 10
        let c11: CGFloat = 11

        //// Group
        //// Cell 1 Drawing
        let cell1Rect = CGRect(x: 66, y: 25, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell1Rect)
        context.translateBy(x: cell1Rect.minX, y: cell1Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell1Rect.size), resizing: .stretch, color: c0, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c0, mode: mode1)
        context.restoreGState()


        //// Cell 2 Drawing
        let cell2Rect = CGRect(x: 178, y: 25, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell2Rect)
        context.translateBy(x: cell2Rect.minX, y: cell2Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell2Rect.size), resizing: .stretch, color: c7, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c0, mode: mode2)
        context.restoreGState()


        //// Cell 3 Drawing
        let cell3Rect = CGRect(x: 290, y: 25, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell3Rect)
        context.translateBy(x: cell3Rect.minX, y: cell3Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell3Rect.size), resizing: .stretch, color: c2, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c0, mode: mode3)
        context.restoreGState()


        //// Cell 4 Drawing
        let cell4Rect = CGRect(x: 402, y: 25, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell4Rect)
        context.translateBy(x: cell4Rect.minX, y: cell4Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell4Rect.size), resizing: .stretch, color: c9, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c0, mode: mode4)
        context.restoreGState()


        //// Cell 5 Drawing
        let cell5Rect = CGRect(x: 514, y: 25, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell5Rect)
        context.translateBy(x: cell5Rect.minX, y: cell5Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell5Rect.size), resizing: .stretch, color: c4, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c0, mode: mode5)
        context.restoreGState()


        //// Cell 6 Drawing
        let cell6Rect = CGRect(x: 626, y: 25, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell6Rect)
        context.translateBy(x: cell6Rect.minX, y: cell6Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell6Rect.size), resizing: .stretch, color: c11, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c0, mode: mode6)
        context.restoreGState()


        //// Cell 7 Drawing
        let cell7Rect = CGRect(x: 738, y: 25, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell7Rect)
        context.translateBy(x: cell7Rect.minX, y: cell7Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell7Rect.size), resizing: .stretch, color: c6, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c0, mode: mode7)
        context.restoreGState()


        //// Cell 8 Drawing
        let cell8Rect = CGRect(x: 850, y: 25, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell8Rect)
        context.translateBy(x: cell8Rect.minX, y: cell8Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell8Rect.size), resizing: .stretch, color: c1, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c0, mode: mode8)
        context.restoreGState()


        //// Cell 9 Drawing
        let cell9Rect = CGRect(x: 10, y: 123, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell9Rect)
        context.translateBy(x: cell9Rect.minX, y: cell9Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell9Rect.size), resizing: .stretch, color: c0, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c8, mode: mode9)
        context.restoreGState()


        //// Cell 10 Drawing
        let cell10Rect = CGRect(x: 122, y: 123, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell10Rect)
        context.translateBy(x: cell10Rect.minX, y: cell10Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell10Rect.size), resizing: .stretch, color: c7, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c8, mode: mode10)
        context.restoreGState()


        //// Cell 11 Drawing
        let cell11Rect = CGRect(x: 234, y: 123, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell11Rect)
        context.translateBy(x: cell11Rect.minX, y: cell11Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell11Rect.size), resizing: .stretch, color: c2, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c8, mode: mode11)
        context.restoreGState()


        //// Cell 12 Drawing
        let cell12Rect = CGRect(x: 346, y: 123, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell12Rect)
        context.translateBy(x: cell12Rect.minX, y: cell12Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell12Rect.size), resizing: .stretch, color: c9, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c8, mode: mode12)
        context.restoreGState()


        //// Cell 13 Drawing
        let cell13Rect = CGRect(x: 458, y: 123, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell13Rect)
        context.translateBy(x: cell13Rect.minX, y: cell13Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell13Rect.size), resizing: .stretch, color: c4, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c8, mode: mode13)
        context.restoreGState()


        //// Cell 14 Drawing
        let cell14Rect = CGRect(x: 570, y: 123, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell14Rect)
        context.translateBy(x: cell14Rect.minX, y: cell14Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell14Rect.size), resizing: .stretch, color: c11, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c8, mode: mode14)
        context.restoreGState()


        //// Cell 15 Drawing
        let cell15Rect = CGRect(x: 682, y: 123, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell15Rect)
        context.translateBy(x: cell15Rect.minX, y: cell15Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell15Rect.size), resizing: .stretch, color: c6, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c8, mode: mode15)
        context.restoreGState()


        //// Cell 16 Drawing
        let cell16Rect = CGRect(x: 794, y: 123, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell16Rect)
        context.translateBy(x: cell16Rect.minX, y: cell16Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell16Rect.size), resizing: .stretch, color: c1, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c8, mode: mode16)
        context.restoreGState()


        //// Cell 17 Drawing
        let cell17Rect = CGRect(x: 906, y: 123, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell17Rect)
        context.translateBy(x: cell17Rect.minX, y: cell17Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell17Rect.size), resizing: .stretch, color: c8, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c8, mode: mode17)
        context.restoreGState()


        //// Cell 18 Drawing
        let cell18Rect = CGRect(x: 66, y: 221, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell18Rect)
        context.translateBy(x: cell18Rect.minX, y: cell18Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell18Rect.size), resizing: .stretch, color: c0, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c11, mode: mode18)
        context.restoreGState()


        //// Cell 19 Drawing
        let cell19Rect = CGRect(x: 178, y: 221, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell19Rect)
        context.translateBy(x: cell19Rect.minX, y: cell19Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell19Rect.size), resizing: .stretch, color: c7, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c11, mode: mode19)
        context.restoreGState()


        //// Cell 20 Drawing
        let cell20Rect = CGRect(x: 290, y: 221, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell20Rect)
        context.translateBy(x: cell20Rect.minX, y: cell20Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell20Rect.size), resizing: .stretch, color: c2, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c11, mode: mode20)
        context.restoreGState()


        //// Cell 21 Drawing
        let cell21Rect = CGRect(x: 402, y: 221, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell21Rect)
        context.translateBy(x: cell21Rect.minX, y: cell21Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell21Rect.size), resizing: .stretch, color: c9, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c11, mode: mode21)
        context.restoreGState()


        //// Cell 22 Drawing
        let cell22Rect = CGRect(x: 514, y: 221, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell22Rect)
        context.translateBy(x: cell22Rect.minX, y: cell22Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell22Rect.size), resizing: .stretch, color: c4, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c11, mode: mode22)
        context.restoreGState()


        //// Cell 23 Drawing
        let cell23Rect = CGRect(x: 626, y: 221, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell23Rect)
        context.translateBy(x: cell23Rect.minX, y: cell23Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell23Rect.size), resizing: .stretch, color: c11, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c11, mode: mode23)
        context.restoreGState()


        //// Cell 24 Drawing
        let cell24Rect = CGRect(x: 738, y: 221, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell24Rect)
        context.translateBy(x: cell24Rect.minX, y: cell24Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell24Rect.size), resizing: .stretch, color: c6, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c11, mode: mode24)
        context.restoreGState()


        //// Cell 25 Drawing
        let cell25Rect = CGRect(x: 850, y: 221, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell25Rect)
        context.translateBy(x: cell25Rect.minX, y: cell25Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell25Rect.size), resizing: .stretch, color: c1, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c11, mode: mode25)
        context.restoreGState()


        //// Cell 26 Drawing
        let cell26Rect = CGRect(x: 10, y: 319, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell26Rect)
        context.translateBy(x: cell26Rect.minX, y: cell26Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell26Rect.size), resizing: .stretch, color: c0, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c7, mode: mode26)
        context.restoreGState()


        //// Cell 27 Drawing
        let cell27Rect = CGRect(x: 122, y: 319, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell27Rect)
        context.translateBy(x: cell27Rect.minX, y: cell27Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell27Rect.size), resizing: .stretch, color: c7, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c7, mode: mode27)
        context.restoreGState()


        //// Cell 28 Drawing
        let cell28Rect = CGRect(x: 234, y: 319, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell28Rect)
        context.translateBy(x: cell28Rect.minX, y: cell28Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell28Rect.size), resizing: .stretch, color: c2, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c7, mode: mode28)
        context.restoreGState()


        //// Cell 29 Drawing
        let cell29Rect = CGRect(x: 346, y: 319, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell29Rect)
        context.translateBy(x: cell29Rect.minX, y: cell29Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell29Rect.size), resizing: .stretch, color: c9, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c7, mode: mode29)
        context.restoreGState()


        //// Cell 30 Drawing
        let cell30Rect = CGRect(x: 458, y: 319, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell30Rect)
        context.translateBy(x: cell30Rect.minX, y: cell30Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell30Rect.size), resizing: .stretch, color: c4, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c7, mode: mode30)
        context.restoreGState()


        //// Cell 31 Drawing
        let cell31Rect = CGRect(x: 570, y: 319, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell31Rect)
        context.translateBy(x: cell31Rect.minX, y: cell31Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell31Rect.size), resizing: .stretch, color: c11, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c7, mode: mode31)
        context.restoreGState()


        //// Cell 32 Drawing
        let cell32Rect = CGRect(x: 682, y: 319, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell32Rect)
        context.translateBy(x: cell32Rect.minX, y: cell32Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell32Rect.size), resizing: .stretch, color: c6, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c7, mode: mode32)
        context.restoreGState()


        //// Cell 33 Drawing
        let cell33Rect = CGRect(x: 794, y: 319, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell33Rect)
        context.translateBy(x: cell33Rect.minX, y: cell33Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell33Rect.size), resizing: .stretch, color: c1, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c7, mode: mode33)
        context.restoreGState()


        //// Cell 34 Drawing
        let cell34Rect = CGRect(x: 906, y: 319, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell34Rect)
        context.translateBy(x: cell34Rect.minX, y: cell34Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell34Rect.size), resizing: .stretch, color: c8, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c7, mode: mode34)
        context.restoreGState()


        //// Cell 35 Drawing
        let cell35Rect = CGRect(x: 66, y: 417, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell35Rect)
        context.translateBy(x: cell35Rect.minX, y: cell35Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell35Rect.size), resizing: .stretch, color: c0, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c10, mode: mode35)
        context.restoreGState()


        //// Cell 36 Drawing
        let cell36Rect = CGRect(x: 178, y: 417, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell36Rect)
        context.translateBy(x: cell36Rect.minX, y: cell36Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell36Rect.size), resizing: .stretch, color: c7, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c10, mode: mode36)
        context.restoreGState()


        //// Cell 37 Drawing
        let cell37Rect = CGRect(x: 290, y: 417, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell37Rect)
        context.translateBy(x: cell37Rect.minX, y: cell37Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell37Rect.size), resizing: .stretch, color: c2, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c10, mode: mode37)
        context.restoreGState()


        //// Cell 38 Drawing
        let cell38Rect = CGRect(x: 402, y: 417, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell38Rect)
        context.translateBy(x: cell38Rect.minX, y: cell38Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell38Rect.size), resizing: .stretch, color: c9, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c10, mode: mode38)
        context.restoreGState()


        //// Cell 39 Drawing
        let cell39Rect = CGRect(x: 514, y: 417, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell39Rect)
        context.translateBy(x: cell39Rect.minX, y: cell39Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell39Rect.size), resizing: .stretch, color: c4, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c10, mode: mode39)
        context.restoreGState()


        //// Cell 40 Drawing
        let cell40Rect = CGRect(x: 626, y: 417, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell40Rect)
        context.translateBy(x: cell40Rect.minX, y: cell40Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell40Rect.size), resizing: .stretch, color: c11, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c10, mode: mode40)
        context.restoreGState()


        //// Cell 41 Drawing
        let cell41Rect = CGRect(x: 738, y: 417, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell41Rect)
        context.translateBy(x: cell41Rect.minX, y: cell41Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell41Rect.size), resizing: .stretch, color: c6, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c10, mode: mode41)
        context.restoreGState()


        //// Cell 42 Drawing
        let cell42Rect = CGRect(x: 850, y: 417, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell42Rect)
        context.translateBy(x: cell42Rect.minX, y: cell42Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell42Rect.size), resizing: .stretch, color: c1, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c10, mode: mode42)
        context.restoreGState()


        //// Cell 43 Drawing
        let cell43Rect = CGRect(x: 10, y: 515, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell43Rect)
        context.translateBy(x: cell43Rect.minX, y: cell43Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell43Rect.size), resizing: .stretch, color: c0, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c6, mode: mode43)
        context.restoreGState()


        //// Cell 44 Drawing
        let cell44Rect = CGRect(x: 122, y: 515, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell44Rect)
        context.translateBy(x: cell44Rect.minX, y: cell44Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell44Rect.size), resizing: .stretch, color: c7, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c6, mode: mode44)
        context.restoreGState()


        //// Cell 45 Drawing
        let cell45Rect = CGRect(x: 234, y: 515, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell45Rect)
        context.translateBy(x: cell45Rect.minX, y: cell45Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell45Rect.size), resizing: .stretch, color: c2, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c6, mode: mode45)
        context.restoreGState()


        //// Cell 46 Drawing
        let cell46Rect = CGRect(x: 346, y: 515, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell46Rect)
        context.translateBy(x: cell46Rect.minX, y: cell46Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell46Rect.size), resizing: .stretch, color: c9, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c6, mode: mode46)
        context.restoreGState()


        //// Cell 47 Drawing
        let cell47Rect = CGRect(x: 458, y: 515, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell47Rect)
        context.translateBy(x: cell47Rect.minX, y: cell47Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell47Rect.size), resizing: .stretch, color: c4, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c6, mode: mode47)
        context.restoreGState()


        //// Cell 48 Drawing
        let cell48Rect = CGRect(x: 570, y: 515, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell48Rect)
        context.translateBy(x: cell48Rect.minX, y: cell48Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell48Rect.size), resizing: .stretch, color: c11, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c6, mode: mode48)
        context.restoreGState()


        //// Cell 49 Drawing
        let cell49Rect = CGRect(x: 682, y: 515, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell49Rect)
        context.translateBy(x: cell49Rect.minX, y: cell49Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell49Rect.size), resizing: .stretch, color: c6, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c6, mode: mode49)
        context.restoreGState()


        //// Cell 50 Drawing
        let cell50Rect = CGRect(x: 794, y: 515, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell50Rect)
        context.translateBy(x: cell50Rect.minX, y: cell50Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell50Rect.size), resizing: .stretch, color: c1, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c6, mode: mode50)
        context.restoreGState()


        //// Cell 51 Drawing
        let cell51Rect = CGRect(x: 906, y: 515, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell51Rect)
        context.translateBy(x: cell51Rect.minX, y: cell51Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell51Rect.size), resizing: .stretch, color: c8, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c6, mode: mode51)
        context.restoreGState()


        //// Cell 52 Drawing
        let cell52Rect = CGRect(x: 66, y: 613, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell52Rect)
        context.translateBy(x: cell52Rect.minX, y: cell52Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell52Rect.size), resizing: .stretch, color: c0, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c9, mode: mode52)
        context.restoreGState()


        //// Cell 53 Drawing
        let cell53Rect = CGRect(x: 178, y: 613, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell53Rect)
        context.translateBy(x: cell53Rect.minX, y: cell53Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell53Rect.size), resizing: .stretch, color: c7, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c9, mode: mode53)
        context.restoreGState()


        //// Cell 54 Drawing
        let cell54Rect = CGRect(x: 290, y: 613, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell54Rect)
        context.translateBy(x: cell54Rect.minX, y: cell54Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell54Rect.size), resizing: .stretch, color: c2, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c9, mode: mode54)
        context.restoreGState()


        //// Cell 55 Drawing
        let cell55Rect = CGRect(x: 402, y: 613, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell55Rect)
        context.translateBy(x: cell55Rect.minX, y: cell55Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell55Rect.size), resizing: .stretch, color: c9, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c9, mode: mode55)
        context.restoreGState()


        //// Cell 56 Drawing
        let cell56Rect = CGRect(x: 514, y: 613, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell56Rect)
        context.translateBy(x: cell56Rect.minX, y: cell56Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell56Rect.size), resizing: .stretch, color: c4, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c9, mode: mode56)
        context.restoreGState()


        //// Cell 57 Drawing
        let cell57Rect = CGRect(x: 626, y: 613, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell57Rect)
        context.translateBy(x: cell57Rect.minX, y: cell57Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell57Rect.size), resizing: .stretch, color: c11, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c9, mode: mode57)
        context.restoreGState()


        //// Cell 58 Drawing
        let cell58Rect = CGRect(x: 738, y: 613, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell58Rect)
        context.translateBy(x: cell58Rect.minX, y: cell58Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell58Rect.size), resizing: .stretch, color: c6, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c9, mode: mode58)
        context.restoreGState()


        //// Cell 59 Drawing
        let cell59Rect = CGRect(x: 850, y: 613, width: 108, height: 125)
        context.saveGState()
        context.clip(to: cell59Rect)
        context.translateBy(x: cell59Rect.minX, y: cell59Rect.minY)

        TriMode59cellTonnetzIOS.drawCellSym(frame: CGRect(origin: .zero, size: cell59Rect.size), resizing: .stretch, color: c1, colorOS: colorOS, pcOS: pcOSadjusted, rowOS: c9, mode: mode59)
        context.restoreGState()




        //// Symbol Drawing
        let symbolRect = CGRect(x: 453, y: 322, width: 119, height: 119)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TriMode59cellTonnetzIOS.drawSharpOutline(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        context.restoreGState()
    }

    @objc dynamic public class func drawOuterRing(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 118, height: 122), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 118, height: 122), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 118, y: resizedFrame.height / 122)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 118, resizedFrame.height / 122)


        //// Color Declarations
        let shadowColor = UIColor(red: 0.293, green: 0.328, blue: 0.380, alpha: 1.000)

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = shadowColor.withAlphaComponent(0.73 * shadowColor.cgColor.alpha)
        shadow.shadowOffset = CGSize(width: 1, height: 1)
        shadow.shadowBlurRadius = 4.5

        //// outline Drawing
        let outlinePath = UIBezierPath()
        outlinePath.move(to: CGPoint(x: 57, y: 12.75))
        outlinePath.addLine(to: CGPoint(x: 102.03, y: 38.75))
        outlinePath.addLine(to: CGPoint(x: 102.03, y: 90.75))
        outlinePath.addLine(to: CGPoint(x: 57, y: 116.75))
        outlinePath.addLine(to: CGPoint(x: 11.97, y: 90.75))
        outlinePath.addLine(to: CGPoint(x: 11.97, y: 38.75))
        outlinePath.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
        UIColor.black.setStroke()
        outlinePath.lineWidth = 2
        outlinePath.lineCapStyle = .round
        outlinePath.lineJoinStyle = .round
        outlinePath.stroke()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawHexagonOutline(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 130, height: 138), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 130, height: 138), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 130, y: resizedFrame.height / 138)


        //// hexagon Drawing
        let hexagonPath = UIBezierPath()
        hexagonPath.move(to: CGPoint(x: 65.5, y: 5))
        hexagonPath.addLine(to: CGPoint(x: 120.93, y: 37))
        hexagonPath.addLine(to: CGPoint(x: 120.93, y: 101))
        hexagonPath.addLine(to: CGPoint(x: 65.5, y: 133))
        hexagonPath.addLine(to: CGPoint(x: 10.07, y: 101))
        hexagonPath.addLine(to: CGPoint(x: 10.07, y: 37))
        hexagonPath.close()
        UIColor.black.setStroke()
        hexagonPath.lineWidth = 4.5
        hexagonPath.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawResizableHexagonOutline(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 149, height: 150), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 149, height: 150), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 149, y: resizedFrame.height / 150)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 9, y: 6, width: 130, height: 138)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        TriMode59cellTonnetzIOS.drawHexagonOutline(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSharpOutline(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 125, height: 125), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 125, height: 125), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 125, y: resizedFrame.height / 125)


        //// Color Declarations
        let color5 = UIColor(red: 0.404, green: 0.404, blue: 0.404, alpha: 1.000)

        //// Bezier Drawing
        context.saveGState()
        context.setAlpha(0.7)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 61.74, y: 10))
        bezierPath.addCurve(to: CGPoint(x: 32.74, y: 27), controlPoint1: CGPoint(x: 61.74, y: 10), controlPoint2: CGPoint(x: 45.85, y: 19.43))
        bezierPath.addCurve(to: CGPoint(x: 16.74, y: 36), controlPoint1: CGPoint(x: 24.06, y: 32.01), controlPoint2: CGPoint(x: 16.74, y: 36))
        bezierPath.addLine(to: CGPoint(x: 16.74, y: 89))
        bezierPath.addLine(to: CGPoint(x: 61.74, y: 115))
        bezierPath.addLine(to: CGPoint(x: 107.74, y: 89))
        bezierPath.addLine(to: CGPoint(x: 107.74, y: 36))
        bezierPath.addLine(to: CGPoint(x: 61.74, y: 10))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 61.74, y: 1))
        bezierPath.addCurve(to: CGPoint(x: 115.74, y: 32), controlPoint1: CGPoint(x: 61.74, y: 1), controlPoint2: CGPoint(x: 115.74, y: 32))
        bezierPath.addLine(to: CGPoint(x: 115.74, y: 93))
        bezierPath.addLine(to: CGPoint(x: 61.74, y: 124))
        bezierPath.addLine(to: CGPoint(x: 8.74, y: 93))
        bezierPath.addLine(to: CGPoint(x: 8.74, y: 32))
        bezierPath.addCurve(to: CGPoint(x: 26.74, y: 22), controlPoint1: CGPoint(x: 8.74, y: 32), controlPoint2: CGPoint(x: 17.04, y: 27.6))
        bezierPath.addCurve(to: CGPoint(x: 61.74, y: 1), controlPoint1: CGPoint(x: 42.25, y: 13.04), controlPoint2: CGPoint(x: 61.74, y: 1))
        bezierPath.addLine(to: CGPoint(x: 61.74, y: 1))
        bezierPath.close()
        UIColor.white.setFill()
        bezierPath.fill()
        color5.setStroke()
        bezierPath.lineWidth = 4.5
        bezierPath.lineCapStyle = .round
        bezierPath.lineJoinStyle = .bevel
        bezierPath.stroke()

        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }




    @objc(TriMode59cellTonnetzIOSResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
